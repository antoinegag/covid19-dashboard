{"version":3,"sources":["hooks/useCovid19TimeSeries.js","components/CovidTimeSeries.js","App.js","serviceWorker.js","index.js"],"names":["transform","json","countries","keys","Object","filter","key","includes","countryCount","length","firstEntry","lastUpdate","date","timeSeries","map","country","name","data","count","makeTimeSerie","field","color","x","t","y","type","mode","marker","CovidTimeSeries","useState","scale","setConfirmedScale","confirmed","className","style","backgroundColor","layout","autosize","yaxis","classnames","onClick","App","setTimeSeries","loading","setLoading","success","setSuccess","fetchData","useCallback","a","fetch","res","ok","JSON","stringify","useEffect","useCovid19TimeSeries","role","aria-label","Boolean","window","location","hostname","match","library","add","fab","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oRAEA,SAASA,EAAUC,EAAMC,GACvB,IAAIC,EAAOC,OAAOD,KAAKF,GACnBC,IACFC,EAAOA,EAAKE,QAAO,SAAAC,GAAG,OAAIJ,EAAUK,SAASD,OAG/C,IAAME,EAAeL,EAAKM,OAEpBC,EAAaT,EAAKE,EAAK,IACvBQ,EAAaD,EAAWA,EAAWD,OAAS,GAAGG,KAE/CC,EAAaV,EAAKW,KAAI,SAAAC,GAAO,MAAK,CACtCC,KAAMD,EACNE,KAAMhB,EAAKc,OAGb,MAAO,CACLG,MAAOV,EACPN,UAAWC,EACXQ,aACAE,c,oCClBJ,SAASM,EACPF,EACAG,EACAJ,EACAK,GAGA,gHACA,MAAO,CACLC,EAAGL,EAAKH,KAAI,SAAAS,GAAC,OAAIA,EAAEX,QACnBY,EAAGP,EAAKH,KAAI,SAAAS,GAAC,OAAIA,EAAEH,MACnBK,KAAM,MACNC,KAAM,gBACNC,OAAQ,CAAEN,SACVL,KAAMA,GAAQI,GAIH,SAASQ,EAAT,GAAoC,IAATX,EAAQ,EAARA,KAAQ,EACbY,mBAAS,OADI,mBACzCC,EADyC,KAClCC,EADkC,KAmChD,OAAO,6BA/BL,6BACE,gDAAsBd,EAAKA,EAAKR,OAAS,GAAGuB,WAC5C,yBAAKC,UAAU,QACb,kBAAC,IAAD,CACEC,MAAO,CAAEC,gBAAiB,QAC1BlB,KAAM,CAACE,EAAcF,EAAM,YAAa,cACxCmB,OAAQ,CACNC,UAAU,EACVC,MAAO,CACLb,KAAMK,OAKd,6BACE,4BACEG,UAAWM,IAAW,OAAQ,CAAE,cAAyB,QAAVT,IAC/CU,QAAS,kBAAMT,EAAkB,SAFnC,OAMA,4BACEE,UAAWM,IAAW,CAAE,cAAyB,WAAVT,IACvCU,QAAS,kBAAMT,EAAkB,YAFnC,a,MCXOU,MA/Bf,WAAgB,IAAD,EFqBA,SAA8BvC,GAAY,IAAD,EAClB2B,qBADkB,mBAC/ChB,EAD+C,KACnC6B,EADmC,OAExBb,oBAAS,GAFe,mBAE/Cc,EAF+C,KAEtCC,EAFsC,OAGxBf,qBAHwB,mBAG/CgB,EAH+C,KAGtCC,EAHsC,KAKhDC,EAAYC,sBAAW,sBAAC,8BAAAC,EAAA,sEACVC,MAAM,oDADI,YACtBC,EADsB,QAEpBC,GAFoB,iCAGPD,EAAIlD,OAHG,OAGpBA,EAHoB,OAI1ByC,EAAc1C,EAAUC,EAAMC,IAC9B4C,GAAW,GALe,wBAO1BA,GAAW,GAPe,QAU5BF,GAAW,GAViB,4CAY3B,CAACS,KAAKC,UAAUpD,KAMnB,OAJAqD,qBAAU,WACRR,MACC,CAACA,IAEG,CAACJ,EAASE,EAAShC,GE3CO2C,CAAqB,CAAC,WAD1C,mBACNb,EADM,KACY1B,GADZ,WAEb,OACE,yBAAKgB,UAAU,iBACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,UACb,iDACqB,IACnB,0BAAMwB,KAAK,MAAMC,aAAW,eAA5B,6BAIDf,EACC,2CAEA,6BACE,yBAAKV,UAAU,WAAf,SACQ,2BAAIhB,EAAKN,aAEjB,6BACE,kBAACiB,EAAD,CAAiBX,KAAMA,EAAKJ,WAAW,GAAGI,aCbtC0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,yBCTNC,IAAQC,IAAIC,KAEZC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4ad1d624.chunk.js","sourcesContent":["import { useEffect, useState, useCallback } from \"react\";\n\nfunction transform(json, countries) {\n  let keys = Object.keys(json);\n  if (countries) {\n    keys = keys.filter(key => countries.includes(key));\n  }\n\n  const countryCount = keys.length;\n\n  const firstEntry = json[keys[0]];\n  const lastUpdate = firstEntry[firstEntry.length - 1].date;\n\n  const timeSeries = keys.map(country => ({\n    name: country,\n    data: json[country]\n  }));\n\n  return {\n    count: countryCount,\n    countries: keys,\n    lastUpdate,\n    timeSeries\n  };\n}\n\nexport default function useCovid19TimeSeries(countries) {\n  const [timeSeries, setTimeSeries] = useState();\n  const [loading, setLoading] = useState(true);\n  const [success, setSuccess] = useState();\n\n  const fetchData = useCallback(async () => {\n    const res = await fetch(\"https://pomber.github.io/covid19/timeseries.json\");\n    if (res.ok) {\n      const json = await res.json();\n      setTimeSeries(transform(json, countries));\n      setSuccess(true);\n    } else {\n      setSuccess(false);\n    }\n\n    setLoading(false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [JSON.stringify(countries)]);\n\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  return [loading, success, timeSeries];\n}\n","import React, { useState } from \"react\";\nimport Plot from \"react-plotly.js\";\nimport classnames from \"classnames\";\n\nfunction makeTimeSerie(\n  data,\n  field,\n  name,\n  color,\n  type = \"scatter\",\n  mode = \"lines+markers\"\n) {\n  return {\n    x: data.map(t => t.date),\n    y: data.map(t => t[field]),\n    type: \"log\",\n    mode: \"lines+markers\",\n    marker: { color },\n    name: name || field\n  };\n}\n\nexport default function CovidTimeSeries({ data }) {\n  const [scale, setConfirmedScale] = useState(\"log\");\n\n  const renderConfirmed = () => (\n    <div>\n      <h3>Confirmed cases: {data[data.length - 1].confirmed}</h3>\n      <div className=\"mb-6\">\n        <Plot\n          style={{ backgroundColor: \"#000\" }}\n          data={[makeTimeSerie(data, \"confirmed\", \"Confirmed\")]}\n          layout={{\n            autosize: true,\n            yaxis: {\n              type: scale\n            }\n          }}\n        />\n      </div>\n      <div>\n        <button\n          className={classnames(\"mr-2\", { \"bg-blue-700\": scale === \"log\" })}\n          onClick={() => setConfirmedScale(\"log\")}\n        >\n          Log\n        </button>\n        <button\n          className={classnames({ \"bg-blue-700\": scale === \"linear\" })}\n          onClick={() => setConfirmedScale(\"linear\")}\n        >\n          Linear\n        </button>\n      </div>\n    </div>\n  );\n\n  return <div>{renderConfirmed()}</div>;\n}\n","import React from \"react\";\nimport useCovid19TimeSeries from \"./hooks/useCovid19TimeSeries\";\nimport CovidTimeSeries from \"./components/CovidTimeSeries\";\nimport \"./styles/styles.css\";\n\nfunction App() {\n  const [loading, success, data] = useCovid19TimeSeries([\"Canada\"]);\n  return (\n    <div className=\"App py-8 px-8\">\n      <div className=\"flex\">\n        <div className=\"w-full\">\n          <h1>\n            Covid-19 in Canada{\" \"}\n            <span role=\"img\" aria-label=\"Canada flag\">\n              ðŸ‡¨ðŸ‡¦\n            </span>\n          </h1>\n          {loading ? (\n            <div>Loading...</div>\n          ) : (\n            <div>\n              <div className=\"text-xl\">\n                As of <b>{data.lastUpdate}</b>\n              </div>\n              <div>\n                <CovidTimeSeries data={data.timeSeries[0].data} />\n              </div>\n              {/* <pre>{JSON.stringify(data, null, 2)}</pre> */}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./styles/tailwind.css\";\n\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { fab } from \"@fortawesome/free-brands-svg-icons\";\n\nlibrary.add(fab);\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}