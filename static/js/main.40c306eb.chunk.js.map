{"version":3,"sources":["utils/makeTimeSerie.js","components/plots/plots.js","components/plots/ConfirmedCases.js","hooks/useCovid19TimeSeries.js","components/plots/Death.js","components/plots/Recovered.js","components/CovidTimeSeries.js","components/MobileWarning.js","components/Disclaimer.js","hooks/useGlobalCovidStats.js","components/global/ChangeIndicator.js","components/global/Numbers.js","components/Global.js","App.js","serviceWorker.js","index.js"],"names":["makeTimeSerie","data","field","name","color","visible","x","map","t","date","y","type","mode","marker","defaultLabels","ConfirmedCases","useState","scale","setConfirmedScale","className","style","backgroundColor","timeSeries","e","undefined","includes","layout","autosize","yaxis","classnames","onClick","transform","json","countries","keys","Object","filter","key","countryCount","length","firstEntry","lastUpdate","country","count","Death","Recovered","CovidTimeSeries","setTimeSeries","loading","setLoading","success","setSuccess","fetchData","useCallback","a","fetch","res","ok","JSON","stringify","useEffect","useCovid19TimeSeries","MobileWarning","icon","faExclamationCircle","Disclaimer","closable","localStorage","getItem","closed","setClosed","href","setItem","computePercentChange","from","to","precision","toFixed","ChangeIndicator","change","lessIsBetter","toLocaleString","Entry","label","number","Numbers","today","confirmed","deaths","recovered","console","log","dayChange","Global","setData","Date","dayBefore","toISOString","resBefore","dayBeforeData","result","useGlobalCovidStats","App","Boolean","window","location","hostname","match","library","add","fab","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.40c306eb.chunk.js","sourcesContent":["export default function makeTimeSerie(\n  data,\n  field,\n  name,\n  color,\n  visible = true,\n  type = \"scatter\",\n  mode = \"lines+markers\"\n) {\n  return {\n    x: data.map(t => t.date),\n    y: data.map(t => t[field]),\n    type: \"log\",\n    mode: \"lines+markers\",\n    marker: { color },\n    name: name || field,\n    visible\n  };\n}\n","export const defaultLabels = [\n  \"Canada\",\n  \"US\",\n  \"China\",\n  \"France\",\n  \"Italy\",\n  \"United Kindom\"\n];\n","import React, { useState } from \"react\";\nimport Plot from \"react-plotly.js\";\nimport classnames from \"classnames\";\nimport makeTimeSerie from \"../../utils/makeTimeSerie\";\nimport { defaultLabels } from \"./plots\";\n\nexport default function ConfirmedCases({ data }) {\n  const [scale, setConfirmedScale] = useState(\"linear\");\n  return (\n    <div>\n      <h3>Confirmed cases</h3>\n      <p>Click on a country on the right to toggle it on the graph.</p>\n      <div className=\"mb-6\">\n        <Plot\n          style={{ backgroundColor: \"#000\" }}\n          data={data.timeSeries.map(e =>\n            makeTimeSerie(\n              e.data,\n              \"confirmed\",\n              e.name,\n              undefined,\n              defaultLabels.includes(e.name) ? true : \"legendonly\"\n            )\n          )}\n          layout={{\n            autosize: true,\n            yaxis: {\n              type: scale\n            }\n          }}\n        />\n      </div>\n      <div>\n        <p>\n          Log scale allow you to easily see the growth rate of confirmed cases\n          while Linear simply shows the total cases over time.\n        </p>\n        <button\n          className={classnames(\"mr-2\", {\n            \"bg-blue-900 border-2 border-gray-600\": scale === \"log\"\n          })}\n          onClick={() => setConfirmedScale(\"log\")}\n        >\n          Log\n        </button>\n        <button\n          className={classnames({\n            \"bg-blue-900 border-2 border-gray-600\": scale === \"linear\"\n          })}\n          onClick={() => setConfirmedScale(\"linear\")}\n        >\n          Linear\n        </button>\n      </div>\n    </div>\n  );\n}\n","import { useEffect, useState, useCallback } from \"react\";\n\nfunction transform(json, countries) {\n  let keys = Object.keys(json);\n  if (countries) {\n    keys = keys.filter(key => countries.includes(key));\n  }\n\n  const countryCount = keys.length;\n\n  const firstEntry = json[keys[0]];\n  const lastUpdate = firstEntry[firstEntry.length - 1].date;\n\n  const timeSeries = keys.map(country => ({\n    name: country,\n    data: json[country]\n  }));\n\n  return {\n    count: countryCount,\n    countries: keys,\n    lastUpdate,\n    timeSeries\n  };\n}\n\nexport default function useCovid19TimeSeries(countries) {\n  const [timeSeries, setTimeSeries] = useState();\n  const [loading, setLoading] = useState(true);\n  const [success, setSuccess] = useState();\n\n  const fetchData = useCallback(async () => {\n    const res = await fetch(\"https://pomber.github.io/covid19/timeseries.json\");\n    if (res.ok) {\n      const json = await res.json();\n      setTimeSeries(transform(json, countries));\n      setSuccess(true);\n    } else {\n      setSuccess(false);\n    }\n\n    setLoading(false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [JSON.stringify(countries)]);\n\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  return [loading, success, timeSeries];\n}\n","import React from \"react\";\nimport Plot from \"react-plotly.js\";\nimport makeTimeSerie from \"../../utils/makeTimeSerie\";\nimport { defaultLabels } from \"./plots\";\n\nexport default function Death({ data }) {\n  return (\n    <div>\n      <h3>Deaths</h3>\n      <p>Click on a country on the right to toggle it on the graph.</p>\n      <div className=\"mb-6\">\n        <Plot\n          style={{ backgroundColor: \"#000\" }}\n          data={data.timeSeries.map(e =>\n            makeTimeSerie(\n              e.data,\n              \"deaths\",\n              e.name,\n              undefined,\n              defaultLabels.includes(e.name) ? true : \"legendonly\"\n            )\n          )}\n          layout={{\n            autosize: true\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport Plot from \"react-plotly.js\";\nimport classnames from \"classnames\";\nimport makeTimeSerie from \"../../utils/makeTimeSerie\";\nimport { defaultLabels } from \"./plots\";\n\nexport default function Recovered({ data }) {\n  const [scale, setConfirmedScale] = useState(\"linear\");\n  return (\n    <div>\n      <h3>Recovered</h3>\n      <p>Click on a country on the right to toggle it on the graph.</p>\n      <div className=\"mb-6\">\n        <Plot\n          style={{ backgroundColor: \"#000\" }}\n          data={data.timeSeries.map(e =>\n            makeTimeSerie(\n              e.data,\n              \"recovered\",\n              e.name,\n              undefined,\n              defaultLabels.includes(e.name) ? true : \"legendonly\"\n            )\n          )}\n          layout={{\n            autosize: true,\n            yaxis: {\n              type: scale\n            }\n          }}\n        />\n      </div>\n      <div>\n        <p>\n          Log scale allow you to easily see the growth rate of recovered cases\n          while Linear simply shows the total recovered cases over time.\n        </p>\n        <button\n          className={classnames(\"mr-2\", {\n            \"bg-blue-900 border-2 border-gray-600\": scale === \"log\"\n          })}\n          onClick={() => setConfirmedScale(\"log\")}\n        >\n          Log\n        </button>\n        <button\n          className={classnames({\n            \"bg-blue-900 border-2 border-gray-600\": scale === \"linear\"\n          })}\n          onClick={() => setConfirmedScale(\"linear\")}\n        >\n          Linear\n        </button>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ConfirmedCases from \"./plots/ConfirmedCases\";\nimport useCovid19TimeSeries from \"../hooks/useCovid19TimeSeries\";\nimport Death from \"./plots/Death\";\nimport Recovered from \"./plots/Recovered\";\nimport { RotateLoader, PulseLoader } from \"react-spinners\";\n\nexport default function CovidTimeSeries() {\n  const [loading, success, timeSeries] = useCovid19TimeSeries();\n\n  return (\n    <div>\n      <h2 className=\"text-center\">Evolution</h2>\n      {success ? (\n        <div>\n          <ConfirmedCases data={timeSeries} />\n          <hr />\n          <Death data={timeSeries} />\n          <hr />\n          <Recovered data={timeSeries} />\n        </div>\n      ) : (\n        <div className=\"text-center my-64\">\n          <PulseLoader color=\"#4299e1\" />\n        </div>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { faExclamationCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nexport default function MobileWarning() {\n  return (\n    <div className=\"block md:hidden bg-orange-200 rounded-lg p-4\">\n      <FontAwesomeIcon\n        icon={faExclamationCircle}\n        className=\"text-orange-500 mr-2\"\n      />\n      Screen too small to display graphs\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\n\nexport default function Disclaimer({ closable }) {\n  const [closed, setClosed] = useState(\n    localStorage.getItem(\"disclaimer-closed\")\n  );\n\n  const close = () => {\n    localStorage.setItem(\"disclaimer-closed\", true);\n    setClosed(true);\n  };\n\n  if (closable && closed) {\n    return false;\n  }\n\n  return (\n    <div className=\"bg-red-200 rounded-lg p-4 mb-2\">\n      <h4 className=\"font-semibold text-xl\">Important disclaimer</h4>\n      <p className=\"mb-2\">\n        Data provided by{\" \"}\n        <a\n          className=\"text-blue-700 underline\"\n          href=\"https://github.com/CSSEGISandData/COVID-19\"\n        >\n          Johns Hopkins CSSE\n        </a>\n      </p>\n      <p className=\"mb-2\">\n        Although the data found here has been produced and processed from third\n        party sources believed to be reliable, no warranty expressed or implied\n        is made regarding accuracy, adequacy, completeness, reliability or\n        usefulness of any information.\n      </p>\n      <p className=\"mb-2 font-bold text-lg\">\n        In short, this doesn't perfectly reflect reality. Stay safe!\n      </p>\n      {closable && <button onClick={close}>Close</button>}\n    </div>\n  );\n}\n","import { useEffect, useState } from \"react\";\n\nfunction computePercentChange(from, to, precision = 2) {\n  return (((to - from) / to) * 100.0).toFixed(precision);\n}\n\nexport default function useGlobalCovidStats(date) {\n  const [data, setData] = useState();\n  const [loading, setLoading] = useState(true);\n  const [success, setSuccess] = useState();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const res = await fetch(\n        `https://covidapi.info/api/v1/global${date ? `/${date}` : \"\"}`\n      );\n      if (res.ok) {\n        const today = await res.json();\n\n        const date = new Date(today.date);\n        const dayBefore = new Date(date - 1);\n\n        // Fetch data from the day before\n        const resBefore = await fetch(\n          `https://covidapi.info/api/v1/global/${dayBefore.toISOString()}`\n        );\n\n        if (resBefore.ok) {\n          const dayBeforeData = await resBefore.json();\n\n          const t = today.result;\n          const y = dayBeforeData.result;\n\n          setData({\n            date: today.date,\n            today: {\n              ...today.result\n            },\n            dayChange: {\n              confirmed: {\n                count: t.confirmed - y.confirmed,\n                change: computePercentChange(y.confirmed, t.confirmed)\n              },\n              deaths: {\n                count: t.deaths - y.deaths,\n                change: computePercentChange(y.deaths, t.deaths)\n              },\n              recovered: {\n                count: t.recovered - y.recovered,\n                change: computePercentChange(y.recovered, t.recovered)\n              }\n            }\n          });\n\n          setSuccess(true);\n        }\n      } else {\n        setSuccess(false);\n      }\n\n      setLoading(false);\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    };\n    fetchData();\n  }, [date]);\n\n  return [loading, success, data];\n}\n","import React from \"react\";\nimport classnames from \"classnames\";\nexport default function ChangeIndicator({\n  count,\n  change,\n  lessIsBetter = false\n}) {\n  return (\n    <div>\n      <div>\n        <span\n          className={classnames(\"font-semibold\", {\n            \"text-red-600\": !lessIsBetter ? change > 0 : change < 0,\n            \"text-green-600\": !lessIsBetter ? change <= 0 : change >= 0\n          })}\n        >\n          {change > 0 && \"+\"} {change} %\n        </span>{\" \"}\n        (24h)\n      </div>\n      <div>\n        {count > 0 && \"+ \"}\n        {count.toLocaleString()}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ChangeIndicator from \"./ChangeIndicator\";\n\nfunction Entry({ label, number, change, lessIsBetter = false }) {\n  return (\n    <div className=\"w-1/3 text-center\">\n      <div className=\"font-semibold\">{label}</div>\n      <div className=\"font-bold text-xl tracking-widest\">\n        {number.toLocaleString()}\n      </div>\n      <div>\n        <ChangeIndicator\n          change={change.change}\n          count={change.count}\n          lessIsBetter={lessIsBetter}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default function Numbers({ date, data }) {\n  const { confirmed, deaths, recovered } = data.today;\n  console.log(data.dayChange.confirmed);\n  return (\n    <div>\n      <h4 className=\"text-2xl font-semibold mb-2 text-center\">{date}</h4>\n      <div className=\"flex\">\n        <Entry\n          label=\"Confirmed\"\n          number={confirmed}\n          change={data.dayChange.confirmed}\n        />\n        <Entry label=\"Deaths\" number={deaths} change={data.dayChange.deaths} />\n        <Entry\n          label=\"Recovered\"\n          number={recovered}\n          change={data.dayChange.recovered}\n          lessIsBetter\n        />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport useGlobalCovidStats from \"../hooks/useGlobalCovidStats\";\nimport Numbers from \"./global/Numbers\";\nimport { PulseLoader } from \"react-spinners\";\n\nexport default function Global() {\n  const [loading, success, data] = useGlobalCovidStats();\n\n  return (\n    <div>\n      <h2 className=\"text-center\">Summary</h2>\n      {success ? (\n        <div>\n          <Numbers date={data.date} data={data} />\n        </div>\n      ) : (\n        <div className=\"text-center my-16\">\n          <PulseLoader color=\"#4299e1\" />\n        </div>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport CovidTimeSeries from \"./components/CovidTimeSeries\";\nimport \"./styles/styles.css\";\nimport MobileWarning from \"./components/MobileWarning\";\nimport Disclaimer from \"./components/Disclaimer\";\nimport Global from \"./components/Global\";\n\nfunction App() {\n  return (\n    <div className=\"App py-8 px-8\">\n      <div className=\"flex\">\n        <div className=\"w-full mb-6\">\n          <h1 className=\"text-center\">State of the world on Covid-19</h1>\n          <Disclaimer closable />\n          <MobileWarning />\n          <div>\n            <div className=\"md:w-1/2 md:mx-auto mb-6\">\n              <Global />\n            </div>\n            <div className=\"hidden md:block\">\n              <CovidTimeSeries />\n            </div>\n          </div>\n        </div>\n      </div>\n      <div>\n        <Disclaimer />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./styles/tailwind.css\";\n\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { fab } from \"@fortawesome/free-brands-svg-icons\";\n\nlibrary.add(fab);\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}